-----------------------------------------------------------------------------
-- Module      :   Convert umlaut written as ae, oe or ue into ä, ö and ü
--              in a txt file
-----------------------------------------------------------------------------
{-# LANGUAGE FlexibleContexts      #-}
{-# LANGUAGE FlexibleInstances     #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables   #-}
{-# LANGUAGE TypeFamilies          #-}
{-# LANGUAGE TypeSynonymInstances  #-}
{-# LANGUAGE OverloadedStrings     #-}

module Lib.ProcPandocDatei  -- (openMain, htf_thisModuelsTests)
                           where
-- import Uniform.Strings
-- import Uniform.TypedFile
import           Uniform.FileIO
-- import Uniform.Error
import           Lib.ProcWord
import           Lib.FileHandling                    ( changeExtensionBakOrNew )

-- for pandoc testing
import           Uniform.Pandoc

import qualified Text.Pandoc                   as P
import qualified Text.Pandoc.Walk              as PW
<<<<<<< HEAD
-- import qualified Data.Text                     as T
-- import qualified Data.Text.IO                  as TIO

-- data Markdown = Markdown Text deriving (Show, Read, Eq, Ord)
-- ^ just for marking md files
-- mdFile :: TypedFile5 Text Markdown
-- mdExtension :: Extension
-- mdExtension = Extension "md" :: Extension
newExtension :: Extension
newExtension = Extension "new" :: Extension
-- mdFile = makeTyped extMD
-- ^ filetype to read text in lines
=======
-- import qualified Text.Pandoc.Templates         as Tp
-- import qualified Text.DocLayout                as L
>>>>>>> 82efcab6e4dd6446a219a3c402ffa6695ad2ee1a

procMd :: Bool -> Path Abs File -> Path Abs File -> ErrIO ()
-- ^ replace umlaut in a pandoc markdown file
-- unless it is an permitted group
-- in a file with extension txt
-- the original file is renamed to bak and the
-- corrected version written to the original filename
-- except when debug flag is set
-- then the new file is written to NEW
-- and the origianl file is not changed
procMd debug fnErl fn = do
<<<<<<< HEAD
    erl2               <- readErlaubt fnErl
    -- erl  <- read6 fnErl txtFile -- reads lines
    -- let erl2 = concat . map words' $ erl :: [Text]

    ls :: MarkdownText <- read8 fn markdownFileType
    putIOwords ["procMd ls", showT ls, "fn", showT fn]
    ls2 <- unPandocM (changeUmlautInPandoc True erl2 (ls))

    if debug
    then do
        let fnnew = makeAbsFile ((toFilePath . removeExtension $ fn) <> "NEW") <.> extMD
        putIOwords ["procMd result in new", showT fnnew]
        write8 fnnew markdownFileType ls2
        putIOwords ["\nprocMd result in new written", showT ls2, "fn", showT fnnew]
    else do
        let fnrename = fn <.> bakExtension :: Path Abs File
        renameOneFile (fn <.> extMD) fnrename
        putIOwords ["\nprocMd renamed to bak", showT fnrename]

    -- let ls2      = map (procLine erlaubt) ls

    write8 fn markdownFileType ls2
    when debug $ putIOwords ["procMd done", showT ls2]

changeUmlautInPandoc
  :: Bool -> [Text] -> MarkdownText -> P.PandocIO MarkdownText
-- ^ changes the umlaut written as ae, oe und ue to umlaut
-- except if the words are included in the erlaubt list
changeUmlautInPandoc debug erlaubt dat = do  -- inside is the error handling
    when debug $ putIOwords ["changeUmlautInPandoc 1", take' 100 . showT $ dat]
        -- preparation 
    let readOptions = P.def{P.readerStandalone = True  
                                ,  P.readerExtensions = P.extensionsFromList 
                                        [P.Ext_yaml_metadata_block ] 
                                }               
    t1 :: String <- liftIO $ readFile "/home/frank/Workspace8/pandocTest/temp.tpl"
    t2 :: Either String (P.Template Text) <- liftIO $ P.compileTemplate (mempty) (s2t t1) 
    t3 :: P.Template Text <- case t2 of
                    Left str -> do 
                                    putIOwords ["error in compile template", s2t str]
                                    return (mempty :: P.Template Text) 
                    Right t -> return (t :: P.Template Text) 
    let writeOptions =  P.def {P.writerSetextHeaders = False
                                , P.writerExtensions = P.extensionsFromList 
                                        [P.Ext_yaml_metadata_block] 
                                ,  P.writerTemplate = Just t3                                                 
                                }          
        
    doc <- P.readMarkdown readOptions (unwrap7 dat) 
    when debug $ putIOwords ["changeUmlautInPandoc before pandoc\n", take' 1000 . showT $ doc]
       
    -- here the processing
    let doc2 = umlautenStr erlaubt doc
    when debug $ putIOwords ["changeUmlautInPandoc after umlauten doc2\n", take' 1000 . showT $ doc2]
    rst2 <- P.writeMarkdown writeOptions
                            doc2
    when debug $ putIOwords ["changeUmlautInPandoc end", take' 100 . showT $ rst2]  -- has space ! 
    return . wrap7 $ rst2



umlautenStr :: [Text] -> P.Pandoc -> P.Pandoc
umlautenStr erlaubt = PW.walk umlauten
    where
        umlauten :: P.Inline -> P.Inline
        umlauten (P.Str w) = P.Str (  procWord2 erlaubt   $ w)
        umlauten x         = x
=======
  erl2               <- readErlaubt fnErl
 
  ls :: MarkdownText <- read8 fn markdownFileType
  putIOwords ["procMd start ls", showT ls, "fn", showT fn]
  ls4 <- changeUmlaut True erl2 ls

  when debug $ putIOwords ["procMd end", take' 100 . showT $ ls4]
      -- liftIO $ TIO.putStrLn . showT $ dat
  -- doc :: P.Pandoc <- readMarkdown2 ls
  --   -- P.def
  --   --   { P.readerExtensions = P.extensionsFromList [P.Ext_yaml_metadata_block]
  --   --   }
  --   -- (unwrap7 dat) -- (T.pack "[testing](url)")
  -- when debug $ putIOwords ["changeUmlautInPandoc", take' 1000 . showT $ doc]
  --   -- liftIO $ TIO.putStrLn . showT $ doc
  -- -- here the processing
  -- let doc2 = umlautenStr erl2 doc
  -- rst2 <- writeAST2md doc2
  --
  -- -- fill into template
  -- let masterfn = makeAbsFile
  --       "/home/frank/Workspace8/replaceUmlaut/markdowWithMeta.dtpl"
  -- template <- read8 masterfn dtmplFileType
  -- let tempText  = unwrap7 template :: Text
  -- let template1 = compileTemplate1 tempText
  -- -- return template2
  --
  -- -- -- template2 :: Tp.Template
  -- -- ls3 <- applyTemplate3 template doc  -- inTemplate.html
  -- let ls3       = Tp.renderTemplate template1 doc2 :: L.Doc String
  -- let ls3a      = L.render Nothing ls3 :: String
  -- let ls4       = wrap7 . s2t $ ls3a :: MarkdownText

  fn2 <- changeExtensionBakOrNew debug fn
-- renderTemplate :: (TemplateTarget a, ToContext a b) => Template a -> b -> Doc a
  -- if debug
  --   then do
  --     let fnnew = makeAbsFile (toFilePath fn <> "NEW")
  --     putIOwords ["procMd result in new", showT fnnew]
  --     write8 fnnew markdownFileType ls4
  --     putIOwords ["procMd result in new written", showT ls4, "fn", showT fnnew]
  --   else do
  --     let fnrename = fn <.> bakExtension :: Path Abs File
  --     renameOneFile (fn <.> extMD) fnrename
  --     putIOwords ["procMd renamed to bak", showT fnrename]
>>>>>>> 82efcab6e4dd6446a219a3c402ffa6695ad2ee1a


<<<<<<< HEAD

procLine :: [Text] -> Text -> Text
procLine erlaubt ln = unwords' . map (procWord2 erlaubt) . words' $ ln
-- process all words in a line
=======
  write8 fn2 markdownFileType ls4
--   writeFile2 (fn2 <.> extMD) (unwrap7 ls4 :: Text )
-- cannot write here to new
  when debug $ putIOwords ["procMd written to fn2", showT fn2, showT ls4]

changeUmlaut :: Bool -> [Text] -> MarkdownText -> ErrIO MarkdownText
-- ^ changes the umlaut written as ae, oe und ue to umlaut
-- except if the words are included in the erlaubt list
changeUmlaut debug erlaubt dat = do  -- inside is the error handling
    when debug $ putIOwords ["changeUmlautInPandoc", take' 100 . showT $ dat]
        -- liftIO $ TIO.putStrLn . showT $ dat
    let readOptions = P.def{P.readerStandalone = True  --no success
                            ,  P.readerExtensions = P.extensionsFromList 
                                    [P.Ext_yaml_metadata_block
                                    ] 
                        }
    doc :: P.Pandoc <- readMarkdown3 readOptions dat
    -- 
    -- should have readerStandalone

    when debug $ putIOwords ["changeUmlautInPandoc doc", take' 1000 . showT $ doc]
    -- liftIO $ TIO.putStrLn . showT $ doc
    -- here the processing
    let doc2 = umlautenStr erlaubt doc
    
    when debug $ putIOwords ["changeUmlautInPandoc doc2", take' 1000 . showT $ doc2]
   
    -- let dtmplFn = makeAbsFile "/home/frank/Workspace8/replaceUmlaut/markdowWithMeta.dtpl"
    -- mytemplate <- read8  dtmplFn dtmplFileType
    -- let mytemplate2 = t2s . unwrap7 $ mytemplate
    -- when debug $ putIOwords ["changeUmlautInPandoc mytemplate2", take' 1000 . showT $ mytemplate2]
    let writeOptions =  P.def {P.writerSetextHeaders = False
                              , P.writerExtensions = P.extensionsFromList 
                                    [P.Ext_yaml_metadata_block]
                -- ,  P.writerTemplate = Just mytemplate2
             }
    --                          
    rst2 <- writeAST3md writeOptions doc2

    -- rst2 <- P.writeMarkdown 
    --                           --   writerExtensions = strictExtensions,
    --                           -- , writerReferenceLinks = True -- use ref-style links
    --                         doc2
    when debug $ putIOwords ["changeUmlautInPandoc end rst2", take' 100 . showT $ rst2]
    return rst2

umlautenStr :: [Text] -> P.Pandoc -> P.Pandoc
-- ^ change umlaut in each text item
-- uses procWord2 which should be idempotent
umlautenStr erlaubt = PW.walk umlauten
 where
  umlauten :: P.Inline -> P.Inline
  umlauten (P.Str w) = P.Str (t2s . procWord2 erlaubt . s2t $ w)
  umlauten x         = x

-- writeAST :: P.Pandoc -> ErrIO MarkdownText
-- -- schreibt den AST als markdown file
-- writeAST doc2 = unPandocM $ 
--     do  
--         rst2 <- P.writeMarkdown P.def { P.writerSetextHeaders = False }
--                             --   }
--                             --   writerExtensions = strictExtensions,
--                             -- , writerReferenceLinks = True -- use ref-style links
--                           doc2
--         return (wrap7 rst2) 


--
-- compileTemplate1 :: Text -> L.Template String
-- compileTemplate1 tempText = case (Tp.compileTemplate tempText) of
--   Left  str -> error "dfasf"-- T ["error in procMd", s2t str]
--   Right t   -> t
>>>>>>> 82efcab6e4dd6446a219a3c402ffa6695ad2ee1a
